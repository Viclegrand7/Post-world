<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>3</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>456</x>
      <y>135</y>
      <w>93</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>*GLuint*
--
-displayList: lotsOfCompiledGLInstructions
--
+ glCallList(gluint) : void /*calls 
    the instructions in the list*/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>342</x>
      <y>117</y>
      <w>432</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>namespace GraphicsEngine
--
bg=#f0d0d0
layer=-1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>516</x>
      <y>0</y>
      <w>102</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>*Vector3f*
--
+att_x: float
+att_y: float
+att_z: float
--
+Vector3f(float, float, float): Vector3f
+Vector3f(Vector3f) : Vector3f
--
+dotProduct(Vector3f): float
+crossProduct(Vector3f): Vector3f
+length(): float
+normalize() : void
+operator=(const Vector3f): Vector3f
+operator+(const Vector3f): Vector
+operator-(const Vector3f): Vector
+operator*(const float): Vector
+operator/(const float): Vector
+operator+=(const Vector3f): Vector
+operator-=(const Vector3f): Vector
+operato*=(const float): Vector
+operator/=(const float): Vector
+operator==(const Vector3f): bool
+operator!=(const Vector3f): bool
+operator&lt;&lt;(ostream, const Vector3f): ostream&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>549</x>
      <y>111</y>
      <w>15</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
layer=-1</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>609</x>
      <y>144</y>
      <w>72</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/*Item*/
--
-outerLook: GLuint
-rotation: Vector3f
--
Item(GLuint, Vector3f): Item
Item(Item*): Item
--
/+draw(Vector3f): void/
/+update(bool): bool/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>546</x>
      <y>135</y>
      <w>69</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>684</x>
      <y>183</y>
      <w>84</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>/*Weapon*/
--
-frames: vector&lt;GLuint&gt;
-normalAnimation: unsigned int
-attackAnimation: unsigned int
-secondaryAnimation: unsigned int
-currentFrame: unsigned int
--
Weapon(vector&lt;GLuint&gt;, unsigned int, 
unsigned int, unsigned int): Weapon
Weapon(Weapon*): Weapon
--
/+draw(bool): void/
/+draw(Vector3f): void/
+update(bool): bool
/+attack() : void/
/+reload() : void/
/+secondary() : void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>705</x>
      <y>297</y>
      <w>63</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>*Gun*
--
-aimPosition: Vector3f
-curPosition: Vector3f
-aimRotation: Vector3f
-curRotation: Vector3f
-isAiming: bool
--
Gun(vector&lt;GLuint&gt;, 
Vector3f, Vector3f): Gun
--
+attack(): void
+secondary(): void
+reload(): void
+draw(Vector3f): void
+draw(bool): void
+update(bool): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>678</x>
      <y>168</y>
      <w>57</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>261</y>
      <w>9</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>606</x>
      <y>195</y>
      <w>75</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>*PowerUp*
--
-activationLook: vector&lt;GLuint&gt;
-currentFrame: unsigned int
--
PowerUp(vector&lt;GLuint&gt;, Vector3f, 
unsigned int): PowerUp
PowerUp(PowerUp*): PowerUp
--
+draw(Vector3f): void
+update(bool): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>651</x>
      <y>183</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>375</x>
      <y>222</y>
      <w>111</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>*Level*
--
-setup: vector&lt;GLuint&gt;
-particules: vector&lt;Particule *&gt;
-curParticules: vector&lt;Particule *&gt;
--
Level(vector&lt;GLuint&gt;, vector&lt;Particule*&gt;): Level
--
+draw(): void
+spawnParticules(unsigned int, Vector3f, int): void
+update(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>453</x>
      <y>159</y>
      <w>9</w>
      <h>69</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>609</x>
      <y>273</y>
      <w>93</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Camera*
--
-pitch: float
-yaw: float
-roll: float
-mouseSpeed : float
-isMouseIn: bool
-isMoving: bool
-jumpPos: vector&lt;float&gt;
-currentJump: unsigned int
--
-lockCamera(): void
-moveCamera(Vector3f, float, float): void
-moveCameraUp(Vector3f, float, float): void
-handleMoves(Vector3f, float): void
+control(Vector3f, int, int,
    bool, float, float): bool
+updateCamera(Vector3f): void
+lookAt(float, float): void
+getPitch(); float
+getYaw(): float
+getsight: Vector3f
+isMouseIn(): bool&amp;
+isMoving(): bool
+jump(): void
+doesJump(Vector3f): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>519</x>
      <y>345</y>
      <w>69</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-frames: vector&lt;GLuint&gt;
-walkAnimation: unsigned int
-attackAnimation: unsigned int
-deathAnimation: unsigned int
-currentFrame: unsigned int
doesAttack: bool
doesDie: bool
--
+draw(Vector3f, Vector3f): void
+update(): bool
+die(): void
+attack(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>525</x>
      <y>165</y>
      <w>69</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>*Board*
--
-gravity: float
-weaponNumber: unsigned int
-displayMode: SDL_DisplayMode
-context: SDL_GLContext
-particules: vector &lt;Particule*&gt;
+fps: int
+currentLevel: unsigned int
+window: SDL_window*
-ennemies: vector&lt;Ennemy *&gt;
-items: vector&lt;Item *&gt;
-itemDisplayed: vector&lt;Item*&gt;
-levels: vector&lt;Level *&gt;
--
-readAllFromFile(ifstream): void
+draw(Vector3f): void
+spawnEnnemy(): void
+spawnItem(unsigned int): void
+changeLevel(unsigned int): void
+drawUI(int, int, unsigned int): void
+getGravity(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>519</x>
      <y>159</y>
      <w>9</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;620.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>537</x>
      <y>270</y>
      <w>66</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>*Player*
--
+camera: Camera
-head: float
-speed: float
-sprintSpeed: float
--
+update(Vector3f, int, int, 
    bool, bool,float): bool
+draw(Weapon *): void
+attack(Weapon *): void
+secondary(Weapon *): void
+reload(Weapon *): void
+jump(): void
+giveSpeed(): float
giveSprintSpeed(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>291</y>
      <w>15</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>531</x>
      <y>264</y>
      <w>9</w>
      <h>87</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;270.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>264</y>
      <w>9</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>162</y>
      <w>45</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>786</x>
      <y>114</y>
      <w>375</w>
      <h>297</h>
    </coordinates>
    <panel_attributes>namespace PhysicsEngine
--
bg=#d0f0d0
layer=-1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>138</y>
      <w>339</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>namespace GameEngine
--
bg=#d0d0f0
layer=-1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>615</x>
      <y>51</y>
      <w>381</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;1250.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>249</y>
      <w>168</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>*Collision*
--
-static weirdTriangleArea(Vector3f, Vector3f, Vector3f): float
+static rayPlane(CollisionQuad quad, Vector3f origin,
    Vector3f direction, float *distance, Vector3f *collisionPoint): bool
+static sphereQuad(CollisionSphere &amp;character, collisionQuad quad): bool
+static sphereBox(CollisionSphere, CollisionBox): bool
+static raySphere(CollisionSphere sphere, Vector3f origin,
    Vector3f direction, float *distance, Vector3f *collisionPoint): bool
+static sphereSphere(CollisionSphere &amp;character, CollisionSphere other): bool
+static doesSphereSphere(CollisonSphere, CollisionSphere): bool
+static rayBox(CollisionBox box, Vector3f origin, Vector3f direction,
    float *distance, Vector3f *collisionPoint): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>330</y>
      <w>150</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>*CollisionSphere*
--
+center: Vector3f
+radius: float
--
+CollisionSphere(Vector3f center, float radius): CollisionSphere
+CollisionSphere(float x, float y, float z, float radius): CollisionSphere</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>807</x>
      <y>321</y>
      <w>141</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>*CollisionQuad*
--
+corners: Vector3f[4]
+normal: Vector3f
--
+CollisionQuad(Vector3f point1, Vector3f point2, Vector3f point3, 
    Vector3f point4, Vector3f normal): CollisionQuad
+CollisionQuad(float x1, float y1, float z1, 
    float x2, float y2, float z2, 
    float x3, float y3, float z3, 
    float x4, float y4, float z4, 
    float xn, float yn, float zn): CollisionQuad</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>951</x>
      <y>366</y>
      <w>93</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>*CollisionBox*
--
+diagonalFaces: CollisionQuad[2]
--
+CollisionBox(CollisionQuad quad1, 
    CollisionQuad quad2): CollisionBox
+CollisionBox(10 x Vector3f): CollisionBox
+CollisionBox(27 x float): CollisionBox</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1002</x>
      <y>168</y>
      <w>156</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>*Player*
--
-hitBox: CollisionSphere
--
+Player(CollisionSphere hitBox): Player
-testCollisionItem(vector&lt;Item*&gt;): int
-testCollisionWalls(vector&lt;CollisionBox*&gt;): void
-testCollisionEnnemies(vector&lt;Ennemy*&gt;): void
+update(vector&lt;Item*&gt;, vector&lt;Ennemy*&gt;, vector&lt;CollisionBox*&gt;): int
+givePos(): Vector3f
+setPos(Vector3f): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>126</y>
      <w>126</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-head: CollisionSphere
-torso: CollisionBox
-legs: CollsionBox[2]
-arms: CollisionBox[2]
-fakeBox: CollisionSphere
-rotation: Vector3f
speed: float
--
+Ennemy(CollisionSphere head, CollisionBox torso, 
    CollisionBox leg1, CollisionBox leg2, 
    CollisionBox arm1, CollisionBox arm2, 
    CollisionBox hitBox): Ennemy
--
-testCollisionWall(vector&lt;CollisionBox&gt;): void
-testCollisionTeamates(vector&lt;Ennemy&gt;): void
-moveDir(Vector3f): void
+update(vector&lt;CollisionBox&gt;, vector&lt;Ennemy&gt;): void
+giveSphere(): Vector3f
+giveRot(): Vector3f
+doesGetHit(Vector3f, Vector3f, float, Vector3f): bool
+givePos(): Vector3f</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1071</x>
      <y>267</y>
      <w>81</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>*Item*
--
+hitBox: CollisionSphere
--
+Item(CollisionSphere hitBox): Item
--
+giveSphere(): CollisionSphere
+givePos(): Vector3f</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>228</y>
      <w>9</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>180</y>
      <w>93</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;290.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1116</x>
      <y>210</y>
      <w>9</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;190.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>42</x>
      <y>165</y>
      <w>54</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/*Character*/
--
#name:string
#health: int
--
Character(): Character
--
+getHealth(): int
+getHit(int value): void
/+attack(): void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>102</x>
      <y>231</y>
      <w>60</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-isDead: bool
-damage: int
-attackDownTime: int
-timeBeforeAttack: int
--
+Ennemy(): Ennemy
+Ennemy(int, int): Ennemy
--
+getDamage(): int
+isDead(): bool
+toAttack(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>12</x>
      <y>231</y>
      <w>81</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>*Player*
--
-maxHealth: int
-stamina: int
-maxStamina: int
-score: int
-isSprinting: bool
-weapons: vector&lt;Weapon *&gt;
-knife: Melee *
-currentWeapon: unsigned int
--
+Player(...): Player
~Player(): destructor
--
+getCurrentWeapon(): int
+getMaxHealth(): int
+getStamina(): int
+getMaxStamina(): int
+sprint(): void
+stopSprint(): void
+getScore(): int
+addScore(int): void
+changeWeapon(unsigned int): void
+prevWeapon(): void
+nextWeapon(): void
+dropWeapon(): Weapon*
+getCurMag(): int
+getCurBull(): int
+use(Item&amp;): Weapon*
+secondary(): bool
+reload(): void
+update(): void
+attack(): void
+toAttack(): bool
+getWeaponDamage(): int
+isRunning(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>51</x>
      <y>204</y>
      <w>15</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>84</x>
      <y>204</y>
      <w>48</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>267</x>
      <y>216</y>
      <w>69</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>/*PowerUp*/
--
-id: int
--
+PowerUp(int): PowerUp
+PowerUp(string, int) : PowerUp
--
+use(): int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>186</x>
      <y>201</y>
      <w>69</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>/*Weapon*/
--
-damage: int
-isAuto: bool
-timeBeforeAttack: int
-attackDownTime: int
--
Weapon(): Weapon
Weapon(bool, int, int): Weapon
--
+getDamage(): int
+isAuto(): bool
+upgrade(int): void
+countdown(): void
/+attack(): bool/
/+stopAttack(): void/
/+getCurMag(): int
/+getCurBull(): int/
/+secondary(): bool/
/+addBullet(int): void/
/+reload(): void/
/+getRange(): float/
/+isShooting(): bool&amp;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>159</x>
      <y>312</y>
      <w>63</w>
      <h>111</h>
    </coordinates>
    <panel_attributes>*Gun*
--
-curMagazine: int
-maxMagazine: int
-curBullets: int
-maxBullets: int
-isAiming: bool
-isReloading: bool
-precision: float
--
+Gun(...): Gun
+Gun(int, bool, int): Gun
+Gun(int, bool, int, int, int, float): Gun
--
+use(): int
+getCurMag(): int
+getCurBull(): int
+addBullet(int): void
+attack(): bool
+stopAttack(): void
+secondary(): bool
+getRange(): float
+reload(): void
+isReloading(): bool&amp;
+isAiming(): bool&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>231</x>
      <y>318</y>
      <w>63</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>*Melee*
--
-range: float
-secondaryDownTime: int
--
+Melee(...): Melee
+Melee(int, int, float, int): Melee
--
+use(): int
+getRange(): float
+attack(): bool
+secondary(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>243</x>
      <y>159</y>
      <w>48</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>/*Item*/
--
#name: string
--
+Item(): Item
~Item(): destructor
--
+giveName(): name
/+use(): int/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>276</x>
      <y>192</y>
      <w>9</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>192</y>
      <w>9</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>198</x>
      <y>300</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>237</x>
      <y>315</y>
      <w>9</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>75</x>
      <y>147</y>
      <w>192</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>620.0;40.0;620.0;10.0;10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>195</x>
      <y>444</y>
      <w>75</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Every class in the following inherits from its counterparts in namespaces. In order to improve visibility, they won't be linked
bg=blue
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>345</x>
      <y>126</y>
      <w>108</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>*Particule*
--
-position: Vector3f
-direction: Vector3f
-rotation: Vector3f
-rotationAdd: Vector3f
-visual: GLuint
-length: unsigned int
-generator: default_random_engine
-distribution: uniform_int_distribution&lt;int&gt;
--
Particule(GLuint, unsigned int, Vector3f&amp;): Particule
Particule(Particule*, Vector3f): Particule
~Particule() : destructor
--
+draw(): void
+update(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>408</x>
      <y>198</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>126</y>
      <w>51</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>150.0;30.0;150.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>873</x>
      <y>408</y>
      <w>18</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;121.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>579</x>
      <y>414</y>
      <w>12</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;20.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>189</x>
      <y>423</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>183</x>
      <y>435</y>
      <w>699</w>
      <h>543</h>
    </coordinates>
    <panel_attributes>FPS
--
bg=#ffffff
layer=-1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>348</x>
      <y>741</y>
      <w>93</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>*GLuint*
--
-displayList: lotsOfCompiledGLInstructions
--
+ glCallList(gluint) : void /*calls 
    the instructions in the list*/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>549</x>
      <y>738</y>
      <w>60</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/*Item*/
--
-outerLook: GLuint
-rotation: Vector3f
--
Item(GLuint, Vector3f): Item
Item(Item*): Item
--
/+draw(Vector3f): void/
/+update(bool): bool/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>438</x>
      <y>738</y>
      <w>117</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>588</x>
      <y>789</y>
      <w>87</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>/*Weapon*/
--
-frames: vector&lt;GLuint&gt;
-normalAnimation: unsigned int
-attackAnimation: unsigned int
-secondaryAnimation: unsigned int
-currentFrame: unsigned int
--
Weapon(vector&lt;GLuint&gt;, unsigned int, 
unsigned int, unsigned int): Weapon
Weapon(Weapon*): Weapon
--
/+draw(bool): void/
/+draw(Vector3f): void/
+update(bool): bool
/+attack() : void/
/+reload() : void/
/+secondary() : void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>597</x>
      <y>885</y>
      <w>63</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>*Gun*
--
-aimPosition: Vector3f
-curPosition: Vector3f
-aimRotation: Vector3f
-curRotation: Vector3f
-isAiming: bool
--
Gun(vector&lt;GLuint&gt;, 
Vector3f, Vector3f): Gun
--
+attack(): void
+secondary(): void
+reload(): void
+draw(Vector3f): void
+draw(bool): void
+update(bool): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>606</x>
      <y>756</y>
      <w>33</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>867</y>
      <w>9</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>504</x>
      <y>789</y>
      <w>69</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>*PowerUp*
--
-activationLook: vector&lt;GLuint&gt;
-currentFrame: unsigned int
--
PowerUp(vector&lt;GLuint&gt;, Vector3f, 
unsigned int): PowerUp
PowerUp(PowerUp*): PowerUp
--
+draw(Vector3f): void
+update(bool): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>561</x>
      <y>777</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>264</x>
      <y>855</y>
      <w>108</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>*Level*
--
-setup: vector&lt;GLuint&gt;
-particules: vector&lt;Particule *&gt;
-curParticules: vector&lt;Particule *&gt;
--
Level(vector&lt;GLuint&gt;, vector&lt;Particule*&gt;): Level
--
+draw(): void
+spawnParticules(unsigned int, Vector3f, int): void
+update(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>765</y>
      <w>9</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>507</x>
      <y>843</y>
      <w>72</w>
      <h>123</h>
    </coordinates>
    <panel_attributes>*Camera*
--
-pitch: float
-yaw: float
-roll: float
-mouseSpeed : float
-isMouseIn: bool
-isMoving: bool
-jumpPos: vector&lt;float&gt;
-currentJump: unsigned int
--
-lockCamera(): void
-moveCamera(Vector3f, float, float): void
-moveCameraUp(Vector3f, float, float): void
-handleMoves(Vector3f, float): void
+control(Vector3f, int, int,
    bool, float, float): bool
+updateCamera(Vector3f): void
+lookAt(float, float): void
+getPitch(); float
+getYaw(): float
+getsight: Vector3f
+isMouseIn(): bool&amp;
+isMoving(): bool
+jump(): void
+doesJump(Vector3f): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>342</x>
      <y>915</y>
      <w>69</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-frames: vector&lt;GLuint&gt;
-walkAnimation: unsigned int
-attackAnimation: unsigned int
-deathAnimation: unsigned int
-currentFrame: unsigned int
doesAttack: bool
doesDie: bool
--
+draw(Vector3f, Vector3f): void
+update(): bool
+die(): void
+attack(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>426</x>
      <y>768</y>
      <w>69</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>*Board*
--
-gravity: float
-weaponNumber: unsigned int
-displayMode: SDL_DisplayMode
-context: SDL_GLContext
-particules: vector &lt;Particule*&gt;
+fps: int
+currentLevel: unsigned int
+window: SDL_window*
-ennemies: vector&lt;Ennemy *&gt;
-items: vector&lt;Item *&gt;
-itemDisplayed: vector&lt;Item*&gt;
-levels: vector&lt;Level *&gt;
--
-readAllFromFile(ifstream): void
+draw(Vector3f): void
+spawnEnnemy(): void
+spawnItem(unsigned int): void
+changeLevel(unsigned int): void
+drawUI(int, int, unsigned int): void
+getGravity(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>405</x>
      <y>765</y>
      <w>15</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;500.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>429</x>
      <y>897</y>
      <w>66</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>*Player*
--
+camera: Camera
-head: float
-speed: float
-sprintSpeed: float
--
+update(Vector3f, int, int, 
    bool, bool,float): bool
+draw(Weapon *): void
+attack(Weapon *): void
+secondary(Weapon *): void
+reload(Weapon *): void
+jump(): void
+giveSpeed(): float
giveSprintSpeed(): float</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>486</x>
      <y>894</y>
      <w>27</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>408</x>
      <y>846</y>
      <w>24</w>
      <h>87</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;270.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>444</x>
      <y>867</y>
      <w>9</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>471</x>
      <y>744</y>
      <w>84</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>579</x>
      <y>621</y>
      <w>168</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>*Collision*
--
-static weirdTriangleArea(Vector3f, Vector3f, Vector3f): float
+static rayPlane(CollisionQuad quad, Vector3f origin,
    Vector3f direction, float *distance, Vector3f *collisionPoint): bool
+static sphereQuad(CollisionSphere &amp;character, collisionQuad quad): bool
+static sphereBox(CollisionSphere, CollisionBox): bool
+static raySphere(CollisionSphere sphere, Vector3f origin,
    Vector3f direction, float *distance, Vector3f *collisionPoint): bool
+static sphereSphere(CollisionSphere &amp;character, CollisionSphere other): bool
+static doesSphereSphere(CollisonSphere, CollisionSphere): bool
+static rayBox(CollisionBox box, Vector3f origin, Vector3f direction,
    float *distance, Vector3f *collisionPoint): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>522</x>
      <y>699</y>
      <w>150</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>*CollisionSphere*
--
+center: Vector3f
+radius: float
--
+CollisionSphere(Vector3f center, float radius): CollisionSphere
+CollisionSphere(float x, float y, float z, float radius): CollisionSphere</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>732</x>
      <y>699</y>
      <w>141</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>*CollisionQuad*
--
+corners: Vector3f[4]
+normal: Vector3f
--
+CollisionQuad(Vector3f point1, Vector3f point2, Vector3f point3, 
    Vector3f point4, Vector3f normal): CollisionQuad
+CollisionQuad(float x1, float y1, float z1, 
    float x2, float y2, float z2, 
    float x3, float y3, float z3, 
    float x4, float y4, float z4, 
    float xn, float yn, float zn): CollisionQuad</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>636</x>
      <y>735</y>
      <w>93</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>*CollisionBox*
--
+diagonalFaces: CollisionQuad[2]
--
+CollisionBox(CollisionQuad quad1, 
    CollisionQuad quad2): CollisionBox
+CollisionBox(10 x Vector3f): CollisionBox
+CollisionBox(27 x float): CollisionBox</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>627</x>
      <y>681</y>
      <w>9</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>678</x>
      <y>681</y>
      <w>9</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>741</x>
      <y>681</y>
      <w>9</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>729</x>
      <y>534</y>
      <w>150</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>*Player*
--
-hitBox: CollisionSphere
--
+Player(CollisionSphere hitBox): Player
-testCollisionItem(vector&lt;Item*&gt;): int
-testCollisionWalls(vector&lt;CollisionBox*&gt;): void
-testCollisionEnnemies(vector&lt;Ennemy*&gt;): void
+update(vector&lt;Item*&gt;, vector&lt;Ennemy*&gt;, vector&lt;CollisionBox*&gt;): int
+givePos(): Vector3f
+setPos(Vector3f): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>528</x>
      <y>504</y>
      <w>111</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-head: CollisionSphere
-torso: CollisionBox
-legs: CollsionBox[2]
-arms: CollisionBox[2]
-fakeBox: CollisionSphere
-rotation: Vector3f
speed: float
--
+Ennemy(CollisionSphere head, CollisionBox torso, 
    CollisionBox leg1, CollisionBox leg2, 
    CollisionBox arm1, CollisionBox arm2, 
    CollisionBox hitBox): Ennemy
--
-testCollisionWall(vector&lt;CollisionBox&gt;): void
-testCollisionTeamates(vector&lt;Ennemy&gt;): void
-moveDir(Vector3f): void
+update(vector&lt;CollisionBox&gt;, vector&lt;Ennemy&gt;): void
+giveSphere(): Vector3f
+giveRot(): Vector3f
+doesGetHit(Vector3f, Vector3f, float, Vector3f): bool
+givePos(): Vector3f</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>645</x>
      <y>588</y>
      <w>93</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>*Obstacle*
--
+hitBox: Collision
--
+Obstacle(Collision someHitBox): Obstacle</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>777</x>
      <y>639</y>
      <w>81</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>*Item*
--
+hitBox: CollisionSphere
--
+Item(CollisionSphere hitBox): Item
--
+giveSphere(): CollisionSphere
+givePos(): Vector3f</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>618</x>
      <y>609</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>693</x>
      <y>606</y>
      <w>9</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>636</x>
      <y>552</y>
      <w>99</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>636</x>
      <y>564</y>
      <w>99</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>310.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>636</x>
      <y>576</y>
      <w>33</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>90.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>717</x>
      <y>582</y>
      <w>18</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;20.0;40.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>792</x>
      <y>582</y>
      <w>9</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;190.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>744</x>
      <y>639</y>
      <w>39</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>234</x>
      <y>483</y>
      <w>54</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/*Character*/
--
#name:string
#health: int
--
Character(): Character
--
+getHealth(): int
+getHit(int value): void
/+attack(): void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>288</x>
      <y>555</y>
      <w>60</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>*Ennemy*
--
-isDead: bool
-damage: int
-attackDownTime: int
-timeBeforeAttack: int
--
+Ennemy(): Ennemy
+Ennemy(int, int): Ennemy
--
+getDamage(): int
+isDead(): bool
+toAttack(): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>555</y>
      <w>81</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>*Player*
--
-maxHealth: int
-stamina: int
-maxStamina: int
-score: int
-isSprinting: bool
-weapons: vector&lt;Weapon *&gt;
-knife: Melee *
-currentWeapon: unsigned int
--
+Player(...): Player
~Player(): destructor
--
+getCurrentWeapon(): int
+getMaxHealth(): int
+getStamina(): int
+getMaxStamina(): int
+sprint(): void
+stopSprint(): void
+getScore(): int
+addScore(int): void
+changeWeapon(unsigned int): void
+prevWeapon(): void
+nextWeapon(): void
+dropWeapon(): Weapon*
+getCurMag(): int
+getCurBull(): int
+use(Item&amp;): Weapon*
+secondary(): bool
+reload(): void
+update(): void
+attack(): void
+toAttack(): bool
+getWeaponDamage(): int
+isRunning(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>234</x>
      <y>522</y>
      <w>24</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>273</x>
      <y>522</y>
      <w>45</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>540</y>
      <w>72</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>/*PowerUp*/
--
-id: int
--
+PowerUp(int): PowerUp
+PowerUp(string, int) : PowerUp
--
+use(): int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>378</x>
      <y>510</y>
      <w>66</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>/*Weapon*/
--
-damage: int
-isAuto: bool
-timeBeforeAttack: int
-attackDownTime: int
--
Weapon(): Weapon
Weapon(bool, int, int): Weapon
--
+getDamage(): int
+isAuto(): bool
+upgrade(int): void
+countdown(): void
/+attack(): bool/
/+stopAttack(): void/
/+getCurMag(): int
/+getCurBull(): int/
/+secondary(): bool/
/+addBullet(int): void/
/+reload(): void/
/+getRange(): float/
/+isShooting(): bool&amp;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>351</x>
      <y>624</y>
      <w>63</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>*Gun*
--
-curMagazine: int
-maxMagazine: int
-curBullets: int
-maxBullets: int
-isAiming: bool
-isReloading: bool
-precision: float
--
+Gun(...): Gun
+Gun(int, bool, int): Gun
+Gun(int, bool, int, int, int, float): Gun
--
+use(): int
+getCurMag(): int
+getCurBull(): int
+addBullet(int): void
+attack(): bool
+stopAttack(): void
+secondary(): bool
+getRange(): float
+reload(): void
+isReloading(): bool&amp;
+isAiming(): bool&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>426</x>
      <y>642</y>
      <w>63</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>*Melee*
--
-range: float
-secondaryDownTime: int
--
+Melee(...): Melee
+Melee(int, int, float, int): Melee
--
+use(): int
+getRange(): float
+attack(): bool
+secondary(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>435</x>
      <y>459</y>
      <w>48</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>/*Item*/
--
#name: string
--
+Item(): Item
~Item(): destructor
--
+giveName(): name
/+use(): int/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>468</x>
      <y>492</y>
      <w>9</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>492</y>
      <w>9</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>612</y>
      <w>9</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>612</y>
      <w>9</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>261</x>
      <y>471</y>
      <w>180</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>580.0;10.0;10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>225</x>
      <y>756</y>
      <w>114</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>*Particule*
--
-position: Vector3f
-direction: Vector3f
-rotation: Vector3f
-rotationAdd: Vector3f
-visual: GLuint
-length: unsigned int
-generator: default_random_engine
-distribution: uniform_int_distribution&lt;int&gt;
--
Particule(GLuint, unsigned int, Vector3f&amp;): Particule
Particule(Particule*, Vector3f): Particule
~Particule() : destructor
--
+draw(): void
+update(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>831</y>
      <w>9</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>312</x>
      <y>747</y>
      <w>42</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>642</x>
      <y>441</y>
      <w>81</w>
      <h>111</h>
    </coordinates>
    <panel_attributes>*Vector3f*
--
+att_x: float
+att_y: float
+att_z: float
--
+Vector3f(float, float, float): Vector3f
+Vector3f(Vector3f) : Vector3f
--
+dotProduct(Vector3f): float
+crossProduct(Vector3f): Vector3f
+length(): float
+normalize() : void
+operator=(const Vector3f): Vector3f
+operator+(const Vector3f): Vector
+operator-(const Vector3f): Vector
+operator*(const float): Vector
+operator/(const float): Vector
+operator+=(const Vector3f): Vector
+operator-=(const Vector3f): Vector
+operato*=(const float): Vector
+operator/=(const float): Vector
+operator==(const Vector3f): bool
+operator!=(const Vector3f): bool
+operator&lt;&lt;(ostream, const Vector3f): ostream&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>591</x>
      <y>240</y>
      <w>99</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>310.0;20.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>594</x>
      <y>249</y>
      <w>96</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>300.0;10.0;10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>411</x>
      <y>276</y>
      <w>96</w>
      <h>117</h>
    </coordinates>
    <panel_attributes>*Loader*
--
-textures: map&lt;string, GLuint&gt;
-drawings: vector&lt;GLuint&gt;
-materials: map&lt;string, GLuint&gt;
-vertexes: vector&lt;Vector3f&gt;
-normals: vector&lt;Vector3f&gt;
-texVertexes: vector&lt;float*&gt;
- currentMaterial: GLuint
--
Loader(): Loader
~Loader(): destructor
--
-loadTexture(string): void
-tryHardOpenFile(string): ifstream
-readVertex(string): void
-readNormal(string): void
-readMaterialLib(string, string): void
-readKs(string, float&amp;, float&amp;, float&amp;): void
-readFloat(string, float&amp;, unsigned int): void
-readInt(string, int&amp;):void
-readMaterial(string, ifstream): void
-readTex(string): void
-readFigure(string): void
+loadFile(string): GLuint
+loadAnimation(string): vector&lt;GLuint&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>492</x>
      <y>243</y>
      <w>39</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;110.0;10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>192</y>
      <w>93</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>228</y>
      <w>204</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>660.0;340.0;660.0;230.0;530.0;230.0;530.0;210.0;480.0;210.0;480.0;230.0;230.0;230.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>969</x>
      <y>300</y>
      <w>66</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>200.0;100.0;200.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>990</x>
      <y>219</y>
      <w>72</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>*Board*
--
-curLevel: unsigned int
-ennemies: vector&lt;Ennemy*&gt;
-items: vector&lt;Item*&gt;
-levels: vector&lt;CollisionBox*&gt;
--
-changeLevel(unsigned int): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>969</x>
      <y>264</y>
      <w>27</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;30.0;30.0;30.0;10.0;60.0;10.0;60.0;30.0;70.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1065</x>
      <y>210</y>
      <w>9</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;400.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1137</x>
      <y>285</y>
      <w>9</w>
      <h>51</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;150.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>306</y>
      <w>9</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>831</x>
      <y>306</y>
      <w>9</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>876</x>
      <y>228</y>
      <w>114</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>10.0;310.0;10.0;290.0;360.0;290.0;360.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>228</y>
      <w>75</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>230.0;460.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>234</x>
      <y>300</y>
      <w>9</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
</diagram>
