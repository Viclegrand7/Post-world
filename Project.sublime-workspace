{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ti",
				"timeStep"
			],
			[
				"time",
				"timeStep"
			],
			[
				"tim",
				"timeInSeconds"
			],
			[
				"util",
				"Utility"
			],
			[
				"z",
				"att_z"
			],
			[
				"at",
				"att_y"
			],
			[
				"a",
				"att_x"
			],
			[
				"en",
				"entity"
			],
			[
				"att_re",
				"att_curFrame"
			],
			[
				"att_",
				"att_texture"
			],
			[
				"S",
				"SDL_QUIT"
			],
			[
				"att",
				"att_curFrame"
			],
			[
				"lSDL2",
				"lSDL2main"
			],
			[
				"de",
				"destination"
			],
			[
				"SD",
				"SDL_Rect"
			],
			[
				"s",
				"source"
			],
			[
				"is",
				"isRunning"
			],
			[
				"Disp",
				"DisplayMode"
			],
			[
				"inc",
				"include"
			],
			[
				"gi",
				"giveNumber"
			],
			[
				"emp",
				"emptyNextNum"
			],
			[
				"my",
				"myCells"
			],
			[
				"give",
				"giveId"
			],
			[
				"PP",
				"PIXEL_PER_HEIGHT"
			],
			[
				"PI",
				"PIXEL_PER_WIDTH"
			],
			[
				"pri",
				"printSVG"
			],
			[
				"agr",
				"att_graphic_number"
			],
			[
				"ag",
				"att_graphic_number"
			],
			[
				"me",
				"myEvent"
			],
			[
				"aev",
				"att_event_list"
			],
			[
				"mS",
				"myString"
			],
			[
				"ae",
				"att_event_list"
			],
			[
				"th",
				"temp_height"
			],
			[
				"te",
				"temp_height"
			],
			[
				"ge",
				"giveEvent"
			],
			[
				"anu",
				"att_numero"
			],
			[
				"nbr",
				"nbr_cols"
			],
			[
				"agra",
				"att_graph_number"
			],
			[
				"cra",
				"created_cells"
			],
			[
				"creat",
				"created_cells"
			],
			[
				"cre",
				"created_cells"
			],
			[
				"b",
				"beginend\t$1.begin(), $1.end()"
			],
			[
				"ce",
				"cells_in_scope"
			],
			[
				"attd",
				"att_dateBirth"
			],
			[
				"da",
				"date"
			],
			[
				"numb",
				"number_of_daughters"
			],
			[
				"E",
				"eventPossibility"
			],
			[
				"num",
				"number_of_daughters"
			],
			[
				"ate",
				"att_event_list"
			],
			[
				"mys",
				"myStream"
			],
			[
				"myStr",
				"myString"
			],
			[
				"even",
				"eventPossibility"
			],
			[
				"ve",
				"vector\tstandard header"
			],
			[
				"pto",
				"pathToConfig"
			],
			[
				"ptore",
				"pathToHornResult"
			],
			[
				"ptres",
				"pathToHornResult"
			],
			[
				"pare",
				"pathToHornResult"
			],
			[
				"path",
				"pathToHornResult"
			],
			[
				"patho",
				"pathToConfig"
			],
			[
				"tr",
				"trouvePosZero"
			],
			[
				"ta",
				"taille"
			],
			[
				"cla",
				"classy_pointer"
			],
			[
				"re",
				"referencing"
			],
			[
				"valu",
				"value_one"
			],
			[
				"val",
				"value_one"
			],
			[
				"ma",
				"matrix"
			],
			[
				"fai",
				"faireDesTrucs"
			],
			[
				"nl",
				"nombreLigne"
			],
			[
				"nC",
				"nombreColonne"
			],
			[
				"nli",
				"nbLig"
			],
			[
				"nL",
				"nombreLigne"
			],
			[
				"nomb",
				"nombreColonne"
			],
			[
				"nom",
				"nombreColonne"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#ifndef RV_ZD_SDL_H\n#define RV_ZD_SDL_H\n#include <SDL2/SDL.h>\n#endif\n\n#ifndef RV_ZD_SDL_IMAGE_H\n#define RV_ZD_SDL_IMAGE_H\n#include <SDL2/SDL_image.h> //Image gestion?\n#endif\n\n#ifndef RV_ZD_SDL_MIXER_H\n#define RV_ZD_SDL_MIXER_H\n#include <SDL2/SDL_mixer.h> //Sound gestion/creation(?)?\n#endif\n\n#ifndef RV_ZD_SDL_TTF_H\n#define RV_ZD_SDL_TTF_H\n#include <SDL2/SDL_ttf.h> //Displaying text\n#endif\n\n#ifndef RV_ZD_IOSTREAM\n#define RV_ZD_IOSTREAM\n#include <iostream>\n#endif\n\n#ifndef RV_ZD_VECTOR\n#define RV_ZD_VECTOR\n#include <vector>\n#endif\n\n#ifndef RV_ZD_Render_H //Let's make sure we don't write same thing multiple times\n#define RV_ZD_Render_H //Equivalent to #pragma once? Thought pragma worked only on Windows and not the others...\n#include \"Render.hh\"\n#endif\n\n#ifndef RV_ZD_ENTITY_H\n#define RV_ZD_ENTITY_H\n#include \"Entity.hh\"\n#endif\n\n#ifndef RV_ZD_UTILITY_H\n#define RV_ZD_UTILITY_H\n#include \"Utility.hh\"\n#endif\n\n\n\nint main(int argc, char* argv[]) {\n\tif (SDL_Init(SDL_INIT_VIDEO)) {\n\t\tstd :: cerr << \"Failed initialising: \" << SDL_GetError() << \"\\n\";\n\t\tthrow \"Failed initialising \\n\";\n\t\treturn 1;\n\t}\n\n\tif (!IMG_Init(IMG_INIT_PNG)) {\n\t\tstd :: cerr << \"Failed initialising PNG: \" << SDL_GetError() << \"\\n\";\n\t\tthrow \"Failed initialising PNG\\n\";\n\t\treturn 1;\n\t}\n\n\tSDL_DisplayMode DisplayMode; //Will allow to get resolution, in theory\n\tSDL_GetCurrentDisplayMode(0, &DisplayMode); //Stocking datas in DisplayMode\n\n\tRender window(\"Best_Game v0.0\", DisplayMode.w, DisplayMode.h); //Creating window having the right size(?) and located on coordinated 0,0 (wherever that is)\n\t//If those don't do perfect job, getDisplayBounds should do the work (need to know the number of monitor? => NOW I KNOW IT! Render, getRefreshRate() has it)\n\n\tint refreshRate = window.getRefreshRate();\n\n\tstd :: cout << refreshRate << std :: endl; //I get 30... issue on my side?\n\n//\tSDL_Texture *imaginaryTexture = window.loadTexture(\"../res/img/someImage.png\");\n\n\tstd::vector<Entity> entities; //Needs textures\n/*\n\t{\n\t\tEntity platform0(Vector3f(100, 0, 0), imaginaryTexture);\n\t\tentities.push_back(platform0);\n\t} //Adding those creat a scope, ensuring platform0 gets deleted afterwards. Same than entities.pushback(Entity(Vector3f(100, 0, 0), imaginaryTexture))?\n*/\n\tbool isRunning = true;\n\tconst float timeStep(0.01f); //FPS = 100\n\tfloat accumulator(0.0f);\n\tfloat currentTime(utility :: timeInSeconds());\n/*\n\tconst int FPS(100);\n\tunsigned int currentTime(0); //FPS regulation\n*/\n\tunsigned int currentTimeTick(0); //FPS regulation\n\n\tSDL_Event event;\n\n\twhile (isRunning) {\n\t\tcurrentTimeTick = SDL_GetTicks();\n\t\tfloat newTime = utility :: timeInSeconds();\n\t\tfloat frameTime = newTime - currentTime;\n\t\tcurrentTime = newTime;\n\t\taccumulator += frameTime;\n\n\t\twhile (accumulator >= timeStep) {\n\t\t\twhile (SDL_PollEvent(&event))\n\t\t\t\tswitch (event.type) {\n\t\t\t\t\tcase SDL_QUIT :\n\t\t\t\t\tisRunning = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\taccumulator -= timeStep; \n\t\t}\n\n\t\tconst float alpha = accumulator / timeStep; //Percent of how much we need to go until \n\n\t\twindow.clear();\n\t\tfor (Entity &someone : entities)\n\t\t\twindow.render(someone);\n//\t\twindow.render(platform0);\n\t\twindow.display();\n\n\t\tif (1000/refreshRate > SDL_GetTicks() - currentTimeTick)\n\t\t\tSDL_Delay(1000/refreshRate - (SDL_GetTicks() - currentTimeTick)); //FPS regulation based on how fast monitor can go\n\n\t}\n\n\twindow.cleanUp();\n\tSDL_Quit();\n\n\treturn 0;\t\t\n}",
			"file": "src/main.cc",
			"file_size": 3341,
			"file_write_time": 132518542735926843,
			"settings":
			{
				"buffer_size": 3358,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Render.hh",
			"settings":
			{
				"buffer_size": 830,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Render.cc",
			"settings":
			{
				"buffer_size": 1728,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Entity.hh",
			"settings":
			{
				"buffer_size": 866,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Entity.cc",
			"settings":
			{
				"buffer_size": 573,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Math.hh",
			"settings":
			{
				"buffer_size": 461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Math.cc",
			"settings":
			{
				"buffer_size": 68,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/Utility.hh",
			"settings":
			{
				"buffer_size": 180,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Utility.cc",
			"settings":
			{
				"buffer_size": 78,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "reminder.txt",
			"settings":
			{
				"buffer_size": 895,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			],
			[
				"contro",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/victor/Desktop/Post-world",
		"/home/victor/Desktop/Post-world/res"
	],
	"file_history":
	[
		"/home/victor/Desktop/Post-world/src/Utility",
		"/home/victor/Desktop/Post-world/reminder.txt",
		"/home/victor/Desktop/Post-world/Project.sublime-project",
		"/timeshift/snapshots/2020-12-07_18-00-01/localhost/usr/local/lib/libSDL2main.la",
		"/home/victor/Desktop/#include \"Render.hh\"",
		"/home/victor/Desktop/segesgseg",
		"/home/victor/Desktop/Post-world/Other",
		"/home/victor/.config/sublime-text-3/Packages/Default/exec.py",
		"/home/victor/Desktop/MyTP/Debugger.cpp",
		"/home/victor/Desktop/Post-world/SDL2-2.0.12/include/SDL_config.h.cmake",
		"/home/victor/Desktop/Post-world/SDL2-2.0.12/CMakeLists.txt",
		"/home/victor/Desktop/Post-world/SDL2-2.0.12/SDL2Config.cmake",
		"/home/victor/Downloads/SDL2-2.0.12.tar.gz.sig",
		"/home/victor/Desktop/DB/meReminder.txt",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/include/test_hs_operator.h",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/exe/gmon.out",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/exe/gmon.bak",
		"/home/victor/Downloads/MyTP/tests/TestCase.cpp",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/src/test_hs_operator_V2.cpp",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/src/nrpyramid.cpp",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/include/nrpyramid.h",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/src/test_hs_operator.cpp",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/src/search_alpha.cpp",
		"/home/victor/Downloads/Debugger.cpp",
		"/home/victor/Desktop/Lea/Test.svg",
		"/home/victor/Desktop/Lea/Cells.cc",
		"/home/victor/Desktop/Lea/Test.sv",
		"/home/victor/Desktop/Lea/myString",
		"/home/victor/Desktop/DB/1. Caserne/schemaCaserne.sql",
		"/home/victor/Desktop/DB/1. Caserne/instanceCaserne.sql",
		"/home/victor/Desktop/DB/0. world/reminder.txt",
		"/home/victor/Desktop/Lea.txt",
		"/home/victor/Downloads/Segfault.cpp",
		"/home/victor/Desktop/meteor-main4-2020-2021/HornShunk++/Makefile",
		"/home/victor/Desktop/MyTP/Character.hh",
		"/home/victor/Desktop/test.cpp",
		"/home/victor/Desktop/figure.cc",
		"/home/victor/Desktop/figure.hh",
		"/home/victor/Desktop/cercle.hh",
		"/home/victor/Desktop/cercle.cc",
		"/home/victor/Downloads/figure.hh",
		"/home/victor/Downloads/figure.cc",
		"/home/victor/Downloads/cercle.hh",
		"/home/victor/Downloads/cercle.cc",
		"/home/victor/file_ssh_key",
		"/home/victor/file_ssh_key.pub",
		"/home/victor/Desktop/tp1-alf942/tests/TestCase.cc",
		"/home/victor/Desktop/tp1-alf942/main.cc",
		"/home/victor/Desktop/tp1-alf942/path.hh",
		"/home/victor/Desktop/tp1-alf942/path.cc",
		"/home/victor/Desktop/tp1-alf942/passgrid.hh",
		"/home/victor/Desktop/tp1-alf942/passgrid.cc",
		"/home/victor/Desktop/MyTP/tests/test_matcher.hh",
		"/home/victor/Desktop/MyTP/tests/Makefile",
		"/home/victor/Desktop/MyTP/tests/catch.hh",
		"/home/victor/Desktop/MyTP/tests/TestCase.cpp",
		"/home/victor/Desktop/MyTP/Segfault.cpp",
		"/home/victor/Desktop/ToWork.txt"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 98.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Utili",
			"double",
			"lib",
			"endif",
			"int main(",
			"main"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"float"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3358,
						"regions":
						{
						},
						"selection":
						[
							[
								2995,
								2995
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1145.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "include/Render.hh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 830,
						"regions":
						{
						},
						"selection":
						[
							[
								748,
								748
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Render.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1728,
						"regions":
						{
						},
						"selection":
						[
							[
								719,
								719
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "include/Entity.hh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 866,
						"regions":
						{
						},
						"selection":
						[
							[
								746,
								746
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Entity.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 573,
						"regions":
						{
						},
						"selection":
						[
							[
								345,
								345
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "include/Math.hh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 461,
						"regions":
						{
						},
						"selection":
						[
							[
								461,
								461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Math.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "include/Utility.hh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 180,
						"regions":
						{
						},
						"selection":
						[
							[
								175,
								175
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Utility.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 78,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "reminder.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 895,
						"regions":
						{
						},
						"selection":
						[
							[
								817,
								817
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 108.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Build Debug",
	"project": "Project.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 223.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
